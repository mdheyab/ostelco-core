version: 2
jobs:
  
  build-code:

    machine:
      enabled: true

    working_directory: ~/project

    steps:

      - checkout
      
      - run:
          name: Gradle Build 
          command: |
            java -version
            ./gradlew clean build -s -x :neo4j-store:test

      - persist_to_workspace:
          root: ~/project/
          paths:
            - .
      

  build-image:
    docker:
      - image: google/cloud-sdk:latest

    working_directory: ~/project

    steps:
      - run:
          name: authenticate with gcloud
          command: |
            # $GOOGLE_GCR_CREDENTIALS env variable contains Google credentials 
            # with permission to write to Google container registry
            echo $GOOGLE_GCR_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
      # if authentication succeeded - checkout code
     # - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project

      - run:
          name: test shared attach_workspace
          command: ls -la     

      # starts a remote docker environment to run docker commands
      - setup_remote_docker

      - run:
          name: build Prime docker image and push image to GCR
          command: |
            gcloud auth configure-docker --quiet
            TAG=${CIRCLE_SHA1:0:9}
            cd prime
            docker build -t eu.gcr.io/pi-ostelco-dev/prime:$TAG .
            docker push eu.gcr.io/pi-ostelco-dev/prime:$TAG
      
      - run:
          name: build Pseudonym-server docker image and push image to GCR
          command: |
            gcloud auth configure-docker --quiet
            TAG=${CIRCLE_SHA1:0:9}
            cd pseudonym-server
            docker build -t eu.gcr.io/pi-ostelco-dev/pseudonym-server:$TAG .
            docker push eu.gcr.io/pi-ostelco-dev/pseudonym-server:$TAG   
      
      - run:
          name: build OCSGW docker image and push image to GCR
          command: |
            gcloud auth configure-docker --quiet
            TAG=${CIRCLE_SHA1:0:9}
            cd ocsgw
            docker build -t eu.gcr.io/pi-ostelco-dev/ocsgw:$TAG .
            docker push eu.gcr.io/pi-ostelco-dev/ocsgw:$TAG      
            


  # deploy-to-dev:

  #   working_directory: ~/project

  #   docker:
  #   - image: praqma/helmsman:v1.3.0-helm-v2.8.1

  #   steps:
  #     - checkout
  #     - run:
  #         name: deploy prime and needed apps to the dev cluster
  #         command: |
  #           export TAG=${CIRCLE_SHA1:0:9}
  #           helmsman --debug --apply -f .circleci/helmsman-dev-deployment.toml

workflows:
  version: 2
  merge-to-dev:
    jobs:
    - build-code:
        filters:
          branches:
            only:
            - circleci-dev
    - build-image:
        requires:
          - build-code
        filters:
          branches:
            only:
            - circleci-dev
    # - deploy-to-dev:
    #     filters:
    #       branches:
    #         only:
    #         - circleci-dev
