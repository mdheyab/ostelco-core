version: 2
jobs:
  build-repo:

    environment:
      # setup the versions you want to use for docker and docker-compose
      DOCKER_VERSION: 18.06.0-ce
      DOCKER_COMPOSE_VERSION: 1.22.0

    docker:
      - image: circleci/openjdk:8u171-jdk

    # By default, the working_directory in circleci is: '~/project'. So it will work without even specifying it.
    # I defined it, just to be explicit.
    working_directory: ~/project

    steps:
      - checkout
      - run:
          name: Build entire repo, skipping test(s)
          # command: ./gradlew clean client-api:build --debug
          # command: ./gradlew clean client-api:build  -x test 
          # command: ./gradlew clean build  -x test --parallel
          # command: ./gradlew clean build  -x :client-api:test 
          command: ./gradlew clean build

      - persist_to_workspace:
          root: ~/
          paths: project

      - run:
          name: Install Docker client on primary container
          command: |
            curl -L -o ~/docker-${DOCKER_VERSION}.tgz \
              https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz
            tar -xzf ~/docker-${DOCKER_VERSION}.tgz -C /tmp/
            if test $(which sudo); then echo "sudo found"; SUDO='sudo'; else echo "sudo not found"; SUDO=''; fi
            ${SUDO} chmod +x /tmp/docker/*   
            ${SUDO} mv /tmp/docker/* /usr/bin/
            
      - run:
          name: Install Docker-Compose on primary container
          command: |
            curl -L -o ~/docker-compose \
              https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m`
            if test $(which sudo); then echo "sudo found"; SUDO='sudo'; else echo "sudo not found";  SUDO=''; fi
            ${SUDO} chmod +x ~/docker-compose    
            ${SUDO} mv ~/docker-compose /usr/bin/


            ###########################################################################################################
            # The few lines of code in the run section for docker and docker-compose installation
            #  checks for sudo binary executable.
            # If it finds it in the container image, the command runs as sudo.
            # If it does not find it, the command runs without sudo.
            # It is done for a reason. Some images are run as root and they do not have sudo.
            # In those images, the USER already is root, and absense of sudo normally ends up in the command failure.
            # So, the small piece of code handle that so it is agnostic to image behavior.
            #
            # The 'if test $(command)' is used instead of normal 'if []', 
            # because I wanted to test for the existence for sudo. 
            # I first tried to capture it in a variable, and then test it, 
            # but if the 'which' command fails during variable assignment, it caused CI server to fail the job.
            # This is why 'which sudo' needs to be inside the 'if test'
            # For completeness sake, the following does not work:
            # CHECK_SUDO=$(which sudo)
            # if [ -n "${CHECK_SUDO}" ]; then echo "found sudo"; SUDO='sudo'; else SUDO=''; fi
            ###########################################################################################################

      - setup_remote_docker

      # The following two commands are just to show how 'setup_remote_docker' works.
      - run: docker run  nginx:alpine "hostname"
      - run: docker images

      # Put in docker-compose up command below:
      # The following docker-compose command will fail without proper secrets.
      # The docker-compose command will also include the docker-compose.override.yaml file
      # - run: docker-compose up --abort-on-container-exit

  code-coverage:

    environment:
      CODACY_DOWNLOAD_URL: https://github.com/codacy/codacy-coverage-reporter/releases/download
      CODACY_VERSION: 4.0.1
      CODACY_JAR_FILE: codacy-coverage-reporter-assembly-latest.jar
      CODACY_MODULE: com.codacy.CodacyCoverageReporter
  
    docker:
      # - image: azul/zulu-openjdk:8
      - image: circleci/openjdk:8u171-jdk

    steps:
      - attach_workspace:
          at: ~/
      - run:  
          name: Download codacy
          command: |
            wget -O ~/${CODACY_JAR_FILE} \
              ${CODACY_DOWNLOAD_URL}/${CODACY_VERSION}/codacy-coverage-reporter-${CODACY_VERSION}-assembly.jar

      - run:
          # the commands below need "CODACY_PROJECT_TOKEN" to be present as (circleci) ENV variable.
          name: Generate Codacy code-coverage report
          command: |
            REPORT_TARGETS=$(find . -name jacocoTestReport.xml)
            
            if [ -n "${REPORT_TARGETS}" ]; then
              echo "Found 'jacocoTestReport.xml' file under 'build' directories in the following modules,"
              echo ", implying - tests were run for them."
              echo "${REPORT_TARGETS}" ; echo 
            else
              echo "There were no 'build' directories found under each module." 
              echo "This means tests were not run in the previous build job."
            fi

            for REPORT_TARGET in ${REPORT_TARGETS}; do
              echo "======> Processing code-coverage report for ======> ${REPORT_TARGET} <======"
              java -cp ~/${CODACY_JAR_FILE} ${CODACY_MODULE} report -l Java -r ${REPORT_TARGET} --partial
            done

            if [ -n "${REPORT_TARGETS}" ]; then
              echo "======> Uploading final code-coverage report to CODACY website. <======"
              java -cp ~/${CODACY_JAR_FILE} ${CODACY_MODULE} final
            else
              echo "There were no 'jacocoTestReport.xml' files found under 'build' directories in each module." 
              echo "This means tests were not run in the previous build job."
              echo "... so, not uploading any code-coverage reports to CODACY website. "
            fi


workflows:
  version: 2
  build-repo-and-code-coverage:
    jobs:
      - build-repo:
          filters:
            branches:
              only: feature/circleci-integration
      - code-coverage:
          requires:
            - build-repo
