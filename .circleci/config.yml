version: 2
jobs:
  build-test-repo:

    machine:
      enabled: true

    # By default, the working_directory in circleci is: '~/project'. So it will work without even specifying it.
    # I defined it, just to be explicit.
    working_directory: ~/project

    steps:

      - checkout
      - run: 
          # checking for merge conflicts and merging locally if none exist
          name: merging ${CIRCLE_BRANCH} into circleci-dev locally
          command: |
            git config --global user.email "you@example.com" # TODO: to be replaced with some CI github user
            git config --global user.name "Your Name"
            git checkout ${CIRCLE_BRANCH}
            git checkout circleci-dev # TODO: to be replaced with "develop" later
            git merge ${CIRCLE_BRANCH} -m "Merging ${CIRCLE_BRANCH} into circleci-dev."

      # Show the java version installed.
      - run: java -version

      - run:
          name: Build entire repo
          command: ./gradlew clean build -s -x :neo4j-store:test 

      - persist_to_workspace:
          root: ~/project/
          paths:
            - .    

      # The following two commands are just to show which exact versions of docker and docker-compose will be used.
      # - run: docker version
      # - run: docker-compose version

      # # Put in docker-compose up command below:
      # # The following docker-compose command will fail without proper secrets.
      # # The docker-compose command will also include the docker-compose.override.yaml file
      - run:
          # This is needed for docker compose acceptance test
          name: Create pantel-prod.json file using the PANTEL_SECRETS_FILE env var. 
          command: |
            echo; echo "======> Creating pantel-prod.json file, using the env variable PANTEL_SECRETS_FILE"
            for LOCATION in $(find . -name .gitignore  -exec grep pantel-prod.json  '{}' '+' ); do 
              DIR_NAME=$(dirname $LOCATION)
              echo "Creating secrets file: ${DIR_NAME}/pantel-prod.json ..."
              echo ${PANTEL_SECRETS_FILE} | base64 -d >  ${DIR_NAME}/pantel-prod.json
              ls -l ${DIR_NAME}/pantel-prod.json 
            done
            echo ''

      - run:
          name: Generate self signed certs
          command: |
            scripts/generate-selfsigned-ssl-certs.sh   ocs.dev.ostelco.org 
            cp certs/ocs.dev.ostelco.org/nginx.crt ocsgw/config/ocs.crt
            scripts/generate-selfsigned-ssl-certs.sh   metrics.dev.ostelco.org 
            cp certs/metrics.dev.ostelco.org/nginx.crt ocsgw/config/metrics.crt
      - run: 
          name: Acceptance Tests
          command: docker-compose up --build --abort-on-container-exit

  code-coverage:

    environment:
      CODACY_DOWNLOAD_URL: https://github.com/codacy/codacy-coverage-reporter/releases/download
      CODACY_VERSION: 4.0.1
      CODACY_JAR_FILE: codacy-coverage-reporter-assembly-latest.jar
      CODACY_MODULE: com.codacy.CodacyCoverageReporter
  
    docker:
      - image: circleci/openjdk:8u171-jdk

    steps:
      - run:  
          name: Download codacy
          command: |
            wget -O ~/${CODACY_JAR_FILE} \
              ${CODACY_DOWNLOAD_URL}/${CODACY_VERSION}/codacy-coverage-reporter-${CODACY_VERSION}-assembly.jar

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project  
                  
      - run:
          # the commands below need "CODACY_PROJECT_TOKEN" to be present as (circleci) ENV variable.
          name: Generate Codacy code-coverage report
          command: |
            REPORT_TARGETS=$(find . -name jacocoTestReport.xml)
            
            if [ -n "${REPORT_TARGETS}" ]; then
              echo "Found 'jacocoTestReport.xml' file under 'build' directories in the following modules,"
              echo ", implying - tests were run for them."
              echo "${REPORT_TARGETS}" ; echo 
            else
              echo "There were no 'build' directories found under each module." 
              echo "This means tests were not run in the previous build job."
            fi

            for REPORT_TARGET in ${REPORT_TARGETS}; do
              echo "======> Processing code-coverage report for ======> ${REPORT_TARGET} <======"
              java -cp ~/${CODACY_JAR_FILE} ${CODACY_MODULE} report -l Java -r ${REPORT_TARGET} --partial
            done

            if [ -n "${REPORT_TARGETS}" ]; then
              echo "======> Uploading final code-coverage report to CODACY website. <======"
              java -cp ~/${CODACY_JAR_FILE} ${CODACY_MODULE} final
            else
              echo "There were no 'jacocoTestReport.xml' files found under 'build' directories in each module." 
              echo "This means tests were not run in the previous build job."
              echo "... so, not uploading any code-coverage reports to CODACY website. "
            fi
  
  # merge-to-develop:
  #   docker:
  #     - image: alpine/git
  #       entrypoint: /bin/sh
  #   steps:
  #     - checkout
  #     - run: 
  #         name: merging the feature branch into develop
  #         command: |
  #           git config --global user.email "you@example.com" # TODO: to be replaced with some CI github user
  #           git config --global user.name "Your Name"
  #           git checkout ${CIRCLE_BRANCH}
  #           git checkout circleci-dev # TODO: to be replaced with "develop" later
  #           git merge ${CIRCLE_BRANCH} 
  #           git push origin circleci-dev # TODO: to be replaced with "develop" later
  #           # git branch -d ${CIRCLE_BRANCH}

  
  # jobs for on-PR-merge-to-dev 
  build-code:
    machine:
      enabled: true
    working_directory: ~/project

    steps:
      - checkout 
      - run:
          name: Gradle Build Prime 
          command: |
            ./gradlew clean prime:build  -x test -s
      # - run:
      #     name: Gradle Build OCSGW 
      #     command: |
      #       ./gradlew clean ocsgw:build  -s 
      
      - persist_to_workspace:
          root: ~/project/
          paths:
            - .
      

  build-image:
    docker:
      - image: google/cloud-sdk:latest

    working_directory: ~/project

    steps:
      - run:
          name: authenticate with gcloud
          command: |
            # $GOOGLE_GCR_CREDENTIALS env variable contains Google credentials 
            # with permission to write to Google container registry
            echo $GOOGLE_GCR_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
      # if authentication succeeded - attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project    

      # starts a remote docker environment to run docker commands
      - setup_remote_docker

      - run:
          name: build Prime docker image and push image to GCR
          command: |
            gcloud auth configure-docker --quiet
            TAG=${CIRCLE_SHA1:0:9}
            cd prime
            docker build -t eu.gcr.io/pi-ostelco-dev/prime:$TAG .
            docker push eu.gcr.io/pi-ostelco-dev/prime:$TAG  
      
      # - run:
      #     name: build OCSGW docker image and push image to GCR
      #     command: |
      #       gcloud auth configure-docker --quiet
      #       TAG=${CIRCLE_SHA1:0:9}
      #       cd ocsgw
      #       docker build -t eu.gcr.io/pi-ostelco-dev/ocsgw:$TAG .
      #       docker push eu.gcr.io/pi-ostelco-dev/ocsgw:$TAG      
            
  update-endpoints:
    docker:
      - image: eu.gcr.io/pi-ostelco-dev/python-gcloud
    steps: 
      - checkout
      - run:
          name: update endpoints spec
          environment:
            CLOUDSDK_CORE_PROJECT: pi-ostelco-dev
          command: |  
            git checkout develop 
            echo $GOOGLE_DEV_ENDPOINTS_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            
            python -m grpc_tools.protoc --include_imports --include_source_info --proto_path=ocs-grpc-api/src/main/proto --descriptor_set_out=ocs_descriptor.pb ocs.proto

            python -m grpc_tools.protoc --include_imports --include_source_info --proto_path=analytics-grpc-api/src/main/proto --descriptor_set_out=metrics_descriptor.pb prime_metrics.proto

            gcloud endpoints services deploy ocs_descriptor.pb prime/infra/new-dev/ocs-api.yaml
            gcloud endpoints services deploy metrics_descriptor.pb prime/infra/new-dev/metrics-api.yaml
            gcloud endpoints services deploy prime/infra/new-dev/prime-client-api.yaml
            

  deploy-to-dev:

    working_directory: ~/project

    docker:
    - image: praqma/helmsman:test-1.4.0

    steps:
      - checkout
      - run:
          name: deploy prime and needed apps to the dev cluster
          command: |
            export TAG=${CIRCLE_SHA1:0:9}
            cd .circleci/
            helmsman --debug --apply -f helmsman-dev-deployment.toml

  create-PR-to-master:
    working_directory: ~/project

    docker:
    - image: eu.gcr.io/pi-ostelco-dev/github-hub:2.5.0

    steps:
      - checkout
      - run:
          name: create PR to merge develop into master
          command: |
            git checkout circleci-dev
            hub pull-request -m "merging circle-dev into circleci-prod" -b circleci-prod

  # jobs for on-PR-merge-to-master 
  deploy-to-prod:
    docker:
    - image: praqma/helmsman:test-1.4.0

    steps:
      - checkout
      - run:
          name: deploy prime and needed apps to the prod cluster
          command: |
            export TAG=$(git rev-parse --short=9 origin/circleci-dev)
            echo $GOOGLE_GCS_PROD_CREDENTIALS > ${HOME}/serviceacccount.json
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/serviceacccount.json
            cd .circleci/
            helmsman --debug --apply -f helmsman-prod-deployment.toml
 
workflows:
  version: 2
  on-feature-branch-PR:
    jobs:
      - build-test-repo:
          filters:
            branches:
              only: feature/circleci-integration
      - code-coverage:
         requires:
           - build-test-repo
      # - merge-to-develop:
      #    requires:
      #      - code-coverage 

  on-PR-merge-to-dev:
    jobs:
    - build-code:
        filters:
          branches:
            only:
            - circleci-dev
    - build-image:
        requires:
          - build-code
    - update-endpoints:
        requires:
          - build-image        
    - deploy-to-dev:
        requires:
          - update-endpoints
    # - create-PR-to-master:
    #     requires:
    #       - deploy-to-dev

  deploy-to-prod:
    jobs:
    - deploy-to-prod:
        filters:
          branches:
            only:
            - circleci-prod                       