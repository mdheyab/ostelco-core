version: 2
jobs:
  build:

    environment:
      CODACY_DOWNLOAD_URL: https://github.com/codacy/codacy-coverage-reporter/releases/download
      CODACY_VERSION: 4.0.1
      CODACY_JAR_FILE: codacy-coverage-reporter-assembly-latest.jar
      CODACY_MODULE: com.codacy.CodacyCoverageReporter

    docker:
      # - image: azul/zulu-openjdk:8
      - image: circleci/openjdk:8u171-jdk

    steps:
      - checkout
      - run: pwd; ls -la
      - run:
          name: Build entire repo, skipping test(s)
          # command: ./gradlew clean client-api:build --debug
          # command: ./gradlew clean client-api:build  -x test 
          # command: ./gradlew clean build  -x test --parallel
          command: ./gradlew clean build  -x :client-api:test 

      - run:  
          name: Download codacy
          command: |
            wget -O ~/${CODACY_JAR_FILE} \
              ${CODACY_DOWNLOAD_URL}/${CODACY_VERSION}/codacy-coverage-reporter-${CODACY_VERSION}-assembly.jar

      - run:
          # the commands below need "CODACY_PROJECT_TOKEN" to be present as (circleci) ENV variable.
          name: Generate Codacy code-coverage report
          command: |
            for REPORT_TARGET in $(find . -name jacocoTestReport.xml); do
              echo "Processing code-coverage report for ${REPORT_TARGET} ..."
              java -cp ~/${CODACY_JAR_FILE} ${CODACY_MODULE} report -l Java -r ${REPORT_TARGET} --partial
            done
            echo "Uploading final code-coverage report to CODACY website."
            java -cp ~/${CODACY_JAR_FILE} ${CODACY_MODULE} final



workflows:
  version: 2
  build-repo-and-code-coverage:
    jobs:
      - build:
          filters:
            branches:
              only: feature/circleci-integration

